import crafttweaker.item.IItemDefinition;

// Define the tome with all the essential starting books.
val tome = <akashictome:tome>.withTag({"akashictome:is_morphing": 1 as byte, "akashictome:data": {tconstruct: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "tconstruct:book", Count: 1 as byte, tag: {"akashictome:definedMod": "tconstruct"}, Damage: 0 as short}, astralsorcery: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "astralsorcery:itemjournal", Count: 1 as byte, tag: {"akashictome:displayName": "Astral Tome", astralsorcery: {}, "akashictome:definedMod": "astralsorcery", "akashictome:is_morphing": 1 as byte, display: {Name: "§rAkashic Tome (§aAstral Tome§r)"}}, Damage: 0 as short}, immersiveengineering: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "immersiveengineering:tool", Count: 1 as byte, tag: {"akashictome:definedMod": "immersiveengineering"}, Damage: 3 as short}, valkyrielib: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "valkyrielib:guide", Count: 1 as byte, tag: {"akashictome:definedMod": "valkyrielib"}, Damage: 0 as short}, woot: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "guideapi:woot-guide", Count: 1 as byte, tag: {"akashictome:definedMod": "woot"}, Damage: 0 as short}, rftools: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "rftoolsdim:rftoolsdim_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "rftools"}, Damage: 0 as short}, ebwizardry: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {AS_Amulet_HolderLeast: -5833645471704209957 as long, AS_Amulet_HolderMost: -4647822831290857904 as long}}, id: "ebwizardry:wizard_handbook", Count: 1 as byte, tag: {"akashictome:displayName": "The Wizard's Handbook", "akashictome:definedMod": "ebwizardry", "akashictome:is_morphing": 1 as byte, display: {Name: "§rAkashic Tome (§aThe Wizard's Handbook§r)"}}, Damage: 0 as short}, curio: {id: "curio:itemcuriobook", Count: 1 as byte, tag: {"akashictome:definedMod": "curio"}, Damage: 0 as short}, thermalfoundation: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {AS_Amulet_HolderLeast: -5833645471704209957 as long, AS_Amulet_HolderMost: -4647822831290857904 as long}}, id: "thermalfoundation:tome_lexicon", Count: 1 as byte, tag: {"akashictome:displayName": "Forge Lexicon", "akashictome:definedMod": "thermalfoundation", "akashictome:is_morphing": 1 as byte, display: {Name: "§rAkashic Tome (§aForge Lexicon§r)"}, Inventory: {}}, Damage: 0 as short}, opencomputers: {id: "opencomputers:tool", Count: 1 as byte, tag: {"akashictome:definedMod": "opencomputers"}, Damage: 4 as short}, forestry1: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "forestry:book_forester", Count: 1 as byte, tag: {"akashictome:definedMod": "forestry1"}, Damage: 0 as short}, hammercore: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "hammercore:manual", Count: 1 as byte, tag: {"akashictome:definedMod": "hammercore"}, Damage: 0 as short}, xnet: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "xnet:xnet_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "xnet"}, Damage: 0 as short}, rftoolscontrol: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "rftoolscontrol:rftoolscontrol_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "rftoolscontrol"}, Damage: 0 as short}, pneumaticcraft: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "patchouli:guide_book", Count: 1 as byte, tag: {"akashictome:definedMod": "pneumaticcraft", "patchouli:book": "pneumaticcraft:book"}, Damage: 0 as short}, actuallyadditions1: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "actuallyadditions:item_booklet", Count: 1 as byte, tag: {"akashictome:definedMod": "actuallyadditions1"}, Damage: 0 as short}, immersiverailroading: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "immersiverailroading:item_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "immersiverailroading"}, Damage: 0 as short}, deepmoblearning: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "patchouli:guide_book", Count: 1 as byte, tag: {"akashictome:definedMod": "deepmoblearning", "patchouli:book": "deepmoblearning:book"}, Damage: 0 as short}, solcarrot: {id: "solcarrot:food_book", Count: 1 as byte, tag: {"akashictome:definedMod": "solcarrot"}, Damage: 0 as short}, rftools1: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "rftools:rftools_shape_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "rftools1"}, Damage: 0 as short}, rftools2: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "rftools:rftools_manual", Count: 1 as byte, tag: {"akashictome:definedMod": "rftools2"}, Damage: 0 as short}, modularrouters: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "guideapi:modularrouters-guidebook", Count: 1 as byte, tag: {"akashictome:definedMod": "modularrouters"}, Damage: 0 as short}, guideapi: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "guideapi:cyclicmagic-guide", Count: 1 as byte, tag: {"akashictome:definedMod": "guideapi"}, Damage: 0 as short}, bloodmagic: {ForgeCaps: {"astralsorcery:cap_item_amulet_holder": {}}, id: "guideapi:bloodmagic-guide", Count: 1 as byte, tag: {"akashictome:definedMod": "bloodmagic"}, Damage: 0 as short}, openblocks: {id: "openblocks:info_book", Count: 1 as byte, tag: {"akashictome:displayName": "World Domination with OpenBlocks", "akashictome:definedMod": "openblocks", "akashictome:is_morphing": 1 as byte, display: {Name: "§rAkashic Tome (§aWorld Domination with OpenBlocks§r)"}}, Damage: 0 as short}}});

//metadata to item
tome.addTooltip(format.aqua("Pre-made with all the basic guides"));
val tome = tome.withTag({display:{Name: "Complete Akashic Tome"}});
mods.jei.JEI.addDescription(tome, "One book to rule them all!");

// Give the player the tome at spawn.
mods.initialinventory.InvHandler.addStartingItem(tome);

//add the full book to JEI as it's own entry
mods.jei.JEI.addItem(tome);

//1 dirt, and 1 book to make the complete book.
//recipes.addShapeless(tome, [<minecraft:dirt>, <minecraft:book>]);
// Changed recipe to 1 stick and 1 dirt, shapeless recipe.
recipes.addShapeless(tome, [<ore:stickWood>,<ore:dirt>]);